// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type Evidence struct {
	ID         string  `json:"id"`
	ReceivedAt string  `json:"received_at"`
	RawValues  string  `json:"raw_values"`
	RawBinarly *string `json:"raw_binarly,omitempty"`
}

type Job struct {
	ID          string  `json:"id"`
	Reference   string  `json:"reference"`
	Type        string  `json:"type"`
	Args        *string `json:"args,omitempty"`
	ScheduledAt string  `json:"scheduled_at"`
	NextRunAt   string  `json:"next_run_at"`
	LastRunAt   *string `json:"last_run_at,omitempty"`
	LockedAt    *string `json:"locked_at,omitempty"`
	LockedUntil *string `json:"locked_until,omitempty"`
	LockedBy    *string `json:"locked_by,omitempty"`
	ErrorCount  int     `json:"error_count"`
	Successful  *bool   `json:"successful,omitempty"`
	FinishedAt  *string `json:"finished_at,omitempty"`
}

type JobFilter struct {
	ID            []string   `json:"id,omitempty"`
	IDLt          *string    `json:"id_lt,omitempty"`
	Reference     []string   `json:"reference,omitempty"`
	ReferenceLt   *string    `json:"reference_lt,omitempty"`
	ScheduledAtLe *string    `json:"scheduled_at_le,omitempty"`
	LockedAtLe    *string    `json:"locked_at_le,omitempty"`
	NextRunAtLe   *string    `json:"next_run_at_le,omitempty"`
	FinishedAtLe  *string    `json:"finished_at_le,omitempty"`
	Type          []string   `json:"type,omitempty"`
	Stauts        *JobStatus `json:"stauts,omitempty"`
}

type JobSort string

const (
	JobSortID          JobSort = "ID"
	JobSortScheduledAt JobSort = "SCHEDULED_AT"
	JobSortLockedAt    JobSort = "LOCKED_AT"
	JobSortFinishedAt  JobSort = "FINISHED_AT"
	JobSortNextRunAt   JobSort = "NEXT_RUN_AT"
	JobSortReference   JobSort = "REFERENCE"
)

var AllJobSort = []JobSort{
	JobSortID,
	JobSortScheduledAt,
	JobSortLockedAt,
	JobSortFinishedAt,
	JobSortNextRunAt,
	JobSortReference,
}

func (e JobSort) IsValid() bool {
	switch e {
	case JobSortID, JobSortScheduledAt, JobSortLockedAt, JobSortFinishedAt, JobSortNextRunAt, JobSortReference:
		return true
	}
	return false
}

func (e JobSort) String() string {
	return string(e)
}

func (e *JobSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobSort", str)
	}
	return nil
}

func (e JobSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobStatus string

const (
	JobStatusRunning JobStatus = "RUNNING"
	JobStatusQueued  JobStatus = "QUEUED"
	JobStatusFailed  JobStatus = "FAILED"
	JobStatusDone    JobStatus = "DONE"
)

var AllJobStatus = []JobStatus{
	JobStatusRunning,
	JobStatusQueued,
	JobStatusFailed,
	JobStatusDone,
}

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusRunning, JobStatusQueued, JobStatusFailed, JobStatusDone:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
