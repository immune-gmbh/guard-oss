import { Dirent, promises } from 'fs';
import _ from 'lodash';
import { join } from 'path';

// Functions are extracted from the nextJS Core
// https://github.com/vercel/next.js/blob/9316dc0a8eb0c2c34449de590e3dda91f1fcd0bc/packages/next/lib/recursive-readdir.ts#L12

/**
 * Recursively read directory
 * @param  {string} dir Directory to read
 * @param  {RegExp} filter Filter for the file name, only the name part is considered, not the full path
 * @param  {string[]=[]} arr This doesn't have to be provided, it's used for the recursion
 * @param  {string=dir`} rootDir Used to replace the initial path, only the relative path is left, it's faster than path.relative.
 * @returns Promise array holding all relative paths
 */
async function recursiveReadDir(
  dir: string,
  filter: RegExp,
  ignore?: RegExp,
  arr: string[] = [],
  rootDir: string = dir,
): Promise<string[]> {
  const result = await promises.readdir(dir, { withFileTypes: true });

  await Promise.all(
    result.map(async (part: Dirent) => {
      const absolutePath = join(dir, part.name);
      if (ignore && ignore.test(part.name)) return;

      // readdir does not follow symbolic links
      // if part is a symbolic link, follow it using stat
      let isDirectory = part.isDirectory();
      if (part.isSymbolicLink()) {
        const stats = await promises.stat(absolutePath);
        isDirectory = stats.isDirectory();
      }

      if (isDirectory) {
        await recursiveReadDir(absolutePath, filter, ignore, arr, rootDir);
        return;
      }

      if (!filter.test(part.name)) {
        return;
      }

      arr.push(absolutePath.replace(rootDir, ''));
    }),
  );

  return arr.sort();
}

// Extracted from
// https://github.com/vercel/next.js/blob/9316dc0a8eb0c2c34449de590e3dda91f1fcd0bc/packages/next/build/utils.ts#L54
function collectPages(directory: string, pageExtensions: string[]): Promise<string[]> {
  return recursiveReadDir(
    directory,
    new RegExp(`\\.(?:${pageExtensions.join('|')})$`),
    new RegExp(`^[0-9]`),
  );
}

const TEMPLATE = (routes) => `// !!! DO NOT EDIT THIS FILE BY HAND !!! npm run generate_paths !!!
const NextJsRoutes = {
${routes
  .map((route) => `  ${_.camelCase(route)}Path: '${route.replace('/index', '') || '/'}'`)
  .join(', \r\n')},
};

export default NextJsRoutes;
`;

async function generatePaths() {
  const pages = await (await collectPages('pages', ['tsx'])).map((page) => page.slice(0, -4));
  await promises.writeFile('generated/NextJsRoutes.ts', TEMPLATE(pages));
}

generatePaths();
