{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "jest": true
  },
  "extends": ["plugin:prettier/recommended", "plugin:@next/next/recommended"],
  "parser": "@typescript-eslint/parser",
  "settings": {
    "react": {
      "version": "detect" // Automatically detect the react version
    }
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": ["react", "@typescript-eslint"],
  "ignorePatterns": ["generated", "node_modules/*", ".next/*", ".out/*", "!.prettierrc.js"], // We don't want to lint generated files nor node_modules, but we want to lint .prettierrc.js (ignored by default by eslint)
  "rules": {
    "react/react-in-jsx-scope": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "prettier/prettier": ["error", {}, { "usePrettierrc": true }], // Includes .prettierrc.js rules
    "object-shorthand": ["error", "always", { "ignoreConstructors": true }],
    "react/jsx-curly-brace-presence": ["warn", { "props": "never", "children": "never" }],
    "no-console": "warn",
    "no-alert": "warn",
    "no-debugger": "warn",
    "no-restricted-imports": [
      "error",
      {
        "patterns": ["../*"]
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "parser": "@typescript-eslint/parser",
      "settings": {
        "react": {
          "version": "detect"
        }
      },
      "env": {
        "browser": true,
        "node": true,
        "es6": true
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended"
      ],
      "rules": {
        "react/prop-types": "off",
        "react/jsx-uses-react": "off",
        "react/react-in-jsx-scope": "off",
        "jsx-a11y/anchor-is-valid": "off",
        "react-hooks/exhaustive-deps": "off",
        "@typescript-eslint/no-unused-vars": ["error"],
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/explicit-function-return-type": [
          "warn",
          {
            "allowExpressions": true,
            "allowConciseArrowFunctionExpressionsStartingWithVoid": true
          }
        ]
      }
    }
  ]
}
