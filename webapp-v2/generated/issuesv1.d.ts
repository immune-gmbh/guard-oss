/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HttpsImmuneAppSchemasIssuesv1SchemaYaml =
  | CsmeNoUpdate
  | CsmeDowngrade
  | UefiOptionRomSet
  | UefiBootAppSet
  | UefiIbbNoUpdate
  | UefiNoExitBootSrv
  | UefiGptChanged
  | UefiSecureBootKeys
  | UefiSecureBootVariables
  | UefiSecureBootDbx
  | UefiOfficialDbx
  | UefiBootFailure
  | UefiBootOrder
  | TpmEndorsementCertUnverified
  | TpmNoEventlog
  | TpmInvalidEventlog
  | TpmDummy
  | GrubBootChanged
  | EsetDisabled
  | EsetNotStarted
  | EsetExcludedSet
  | EsetManipulated
  | WindowsBootConfig
  | WindowsBootLogQuotes
  | WindowsBootCounterReplay
  | ImaInvalidLog
  | ImaBootAggregate
  | ImaRuntimeMeasurements
  | TscPcrValues
  | TscEndorsementCertificate
  | PolicyEndpointProtection
  | PolicyIntelTsc
  | FirmwareUpdate
  | Binarly;
export type CsmeNoUpdate = Common & {
  id: "csme/no-update";
  incident: true;
  aspect: "firmware";
  args: {
    components: CsmeNoUpdateComponent[];
  };
};
export type CsmeDowngrade = Common & {
  id: "csme/downgrade";
  incident: true;
  aspect: "firmware";
  args: {
    combined?: CsmeDowngradeComponent;
    components?: CsmeDowngradeComponent[];
  };
};
export type UefiOptionRomSet = Common & {
  id: "uefi/option-rom-set";
  incident: true;
  aspect: "firmware";
  args: {
    devices: UefiOptionRomSetDevice[];
  };
};
export type UefiBootAppSet = Common & {
  id: "uefi/boot-app-set";
  incident: true;
  aspect: "bootloader";
  args: {
    apps: UefiBootAppSetApp[];
  };
};
export type UefiIbbNoUpdate = Common & {
  id: "uefi/ibb-no-update";
  incident: true;
  aspect: "firmware";
  args: {
    vendor: string;
    version: string;
    release_date: string;
    before: string;
    after: string;
  };
};
export type UefiNoExitBootSrv = Common & {
  id: "uefi/no-exit-boot-srv";
  incident: false;
  aspect: "firmware";
  args: {
    entered: boolean;
  };
};
export type UefiGptChanged = Common & {
  id: "uefi/gpt-changed";
  incident: true;
  aspect: "bootloader";
  args: {
    guid: string;
    before: string;
    after: string;
    partitions: UefiGptChangedPartition[];
  };
};
export type UefiSecureBootKeys = Common & {
  id: "uefi/secure-boot-keys";
  incident: true;
  aspect: "firmware";
  args: {
    pk?: UefiSecureBootKeysCertificate;
    kek?: UefiSecureBootKeysCertificate[];
  };
};
export type UefiSecureBootVariables = Common & {
  id: "uefi/secure-boot-variables";
  incident: true;
  aspect: "configuration";
  args: {
    setup_mode: string;
    audit_mode: string;
    deployed_mode: string;
    secure_boot: string;
  };
};
export type UefiSecureBootDbx = Common & {
  id: "uefi/secure-boot-dbx";
  incident: true;
  aspect: "configuration";
  args: {
    fprs: string[];
  };
};
export type UefiOfficialDbx = Common & {
  id: "uefi/official-dbx";
  incident: false;
  aspect: "configuration";
  args: {
    fprs: string[];
  };
};
export type UefiBootFailure = Common & {
  id: "uefi/boot-failure";
  incident: true;
  aspect: "firmware";
  args: {
    pcr0: string;
    pcr1: string;
    pcr2: string;
    pcr3: string;
    pcr4: string;
    pcr5: string;
    pcr6: string;
    pcr7: string;
  };
};
export type UefiBootOrder = Common & {
  id: "uefi/boot-order";
  incident: true;
  aspect: "configuration";
  args: {
    variables: UefiBootOrderVariable[];
  };
};
export type TpmEndorsementCertUnverified = Common & {
  id: "tpm/endorsement-cert-unverified";
  incident: true;
  aspect: "supply-chain";
  args: {
    error: "san-invalid" | "san-mismatch" | "no-eku" | "invalid-certificate";
    vendor: string;
    ek_vendor?: string;
    ek_version?: string;
    ek_issuer?: string;
  };
};
export type TpmNoEventlog = Common & {
  id: "tpm/no-eventlog";
  incident: true;
  aspect: "firmware";
  args?: {};
};
export type TpmInvalidEventlog = Common & {
  id: "tpm/invalid-eventlog";
  incident: true;
  aspect: "firmware";
  args: {
    error: "format-invalid" | "pcr-mismatch";
    pcr?: TpmInvalidEventlogPcr[];
  };
};
export type TpmDummy = Common & {
  id: "tpm/dummy";
  incident: true;
  aspect: "supply-chain";
  args?: {};
};
export type GrubBootChanged = Common & {
  id: "grub/boot-changed";
  incident: true;
  aspect: "bootloader";
  args: {
    before: GrubBootChangedConfig;
    after: GrubBootChangedConfig;
  };
};
export type EsetDisabled = Common & {
  id: "eset/disabled";
  incident: true;
  aspect: "endpoint-protection";
};
export type EsetNotStarted = Common & {
  id: "eset/not-started";
  incident: true;
  aspect: "endpoint-protection";
  args: {
    components: EsetNotStartedComponent[];
  };
};
export type EsetExcludedSet = Common & {
  id: "eset/excluded-set";
  incident: true;
  aspect: "endpoint-protection";
  args: {
    files: string[];
    processes: string[];
  };
};
export type EsetManipulated = Common & {
  id: "eset/manipulated";
  incident: true;
  aspect: "endpoint-protection";
  args: {
    components: EsetManipulatedFile[];
  };
};
export type WindowsBootConfig = Common & {
  id: "windows/boot-config";
  incident: false;
  aspect: "operating-system";
  args: {
    boot_debugging: boolean;
    kernel_debugging: boolean;
    dep_disabled?: boolean;
    code_integrity_disabled?: boolean;
    test_signing: boolean;
  };
};
export type WindowsBootLogQuotes = Common & {
  id: "windows/boot-log";
  incident: true;
  aspect: "operating-system";
  args?: {
    error: "missing-trust-point" | "wrong-format" | "wrong-signature" | "wrong-quote";
    log?: number;
  };
};
export type WindowsBootCounterReplay = Common & {
  id: "windows/boot-counter-replay";
  incident: true;
  aspect: "operating-system";
  args: {
    latest: string;
    received: string;
  };
};
export type ImaInvalidLog = Common & {
  id: "ima/invalid-log";
  incident: true;
  aspect: "endpoint-protection";
  args: {
    pcr: ImaInvalidLogPcr[];
  };
};
export type ImaBootAggregate = Common & {
  id: "ima/boot-aggregate";
  incident: true;
  aspect: "endpoint-protection";
  args: {
    computed: string;
    logged: string;
  };
};
export type ImaRuntimeMeasurements = Common & {
  id: "ima/runtime-measurements";
  incident: true;
  aspect: "endpoint-protection";
  args: {
    files: ImaRuntimeMeasurementsFile[];
  };
};
export type TscPcrValues = Common & {
  id: "tsc/pcr-values";
  incident: true;
  aspect: "supply-chain";
  args: {
    values: TscPcrValuesPcr[];
  };
};
export type TscEndorsementCertificate = Common & {
  id: "tsc/endorsement-certificate";
  incident: true;
  aspect: "supply-chain";
  args: {
    error: "holder-issuer" | "xml-serial" | "holder-serial";
    holder_issuer?: string;
    holder_serial?: string;
    xml_serial?: string;
    ek_issuer?: string;
    ek_serial?: string;
  };
};
export type PolicyEndpointProtection = Common & {
  id: "policy/endpoint-protection";
  incident: true;
  aspect: "endpoint-protection";
};
export type PolicyIntelTsc = Common & {
  id: "policy/intel-tsc";
  incident: true;
  aspect: "supply-chain";
};
export type FirmwareUpdate = Common & {
  id: "fw/update";
  incident: false;
  aspect: "firmware";
  args: {
    updates: FirmwareUpdateUpdates[];
  };
};
export type Binarly = Common & {
  id:
    | "brly/2021-001-swsmi-len-65529"
    | "brly/rkloader"
    | "brly/2021-025"
    | "brly/2021-037"
    | "brly/2021-035"
    | "brly/2021-032"
    | "brly/2021-023"
    | "brly/2021-029"
    | "brly/intel-bssa-dft"
    | "brly/2021-050"
    | "brly/2021-051"
    | "brly/2021-013"
    | "brly/2021-022"
    | "brly/2021-024"
    | "brly/lojax-secdxe"
    | "brly/usbrt-intel-sa-00057"
    | "brly/2021-005"
    | "brly/2021-021"
    | "brly/moonbounce-core-dxe"
    | "brly/2021-053"
    | "brly/2021-028"
    | "brly/2021-008"
    | "brly/2021-040"
    | "brly/2021-020"
    | "brly/2021-004"
    | "brly/2021-016"
    | "brly/usbrt-cve-2017-5721"
    | "brly/2021-006"
    | "brly/2021-019"
    | "brly/2021-009"
    | "brly/2021-026"
    | "brly/2021-039"
    | "brly/2021-010"
    | "brly/2021-007"
    | "brly/2021-031"
    | "brly/mosaicregressor"
    | "brly/2021-012"
    | "brly/2021-033"
    | "brly/2021-036"
    | "brly/thinkpwn"
    | "brly/2021-014"
    | "brly/2021-018"
    | "brly/2021-038"
    | "brly/2022-004"
    | "brly/especter"
    | "brly/2021-003"
    | "brly/2021-042"
    | "brly/usbrt-swsmi-cve-2020-12301"
    | "brly/2021-043"
    | "brly/2022-028-rsbstuffing"
    | "brly/2021-034"
    | "brly/2021-030"
    | "brly/2021-041"
    | "brly/2021-017"
    | "brly/usbrt-usbsmi-cve-2020-12301"
    | "brly/2021-027"
    | "brly/2021-015"
    | "brly/2021-011"
    | "brly/2021-045"
    | "brly/2021-009-1"
    | "brly/2021-029-1"
    | "brly/2021-010-1"
    | "brly/2021-011-1"
    | "brly/2021-008-1"
    | "brly/2021-001"
    | "brly/2022-027"
    | "brly/2022-014"
    | "brly/2022-011"
    | "brly/2022-013"
    | "brly/2022-016"
    | "brly/2021-047"
    | "brly/2022-015"
    | "brly/2022-009"
    | "brly/2022-010"
    | "brly/2022-012"
    | "brly/2021-046";
  incident: false;
  aspect: "firmware";
};

export interface Common {
  id: string;
  incident: boolean;
  aspect: "supply-chain" | "firmware" | "configuration" | "bootloader" | "operating-system" | "endpoint-protection";
}
export interface CsmeNoUpdateComponent {
  name: string;
  version: string;
  before: string;
  after: string;
}
export interface CsmeDowngradeComponent {
  name?: string;
  before: string;
  after: string;
}
export interface UefiOptionRomSetDevice {
  before: string;
  after: string;
  address?: string;
  vendor: string;
  name: string;
}
export interface UefiBootAppSetApp {
  path: string;
  before: string;
  after: string;
}
export interface UefiGptChangedPartition {
  start: string;
  end: string;
  type: string;
  guid: string;
  name?: string;
}
export interface UefiSecureBootKeysCertificate {
  issuer: string;
  subject: string;
  fpr: string;
  not_before: string;
  not_after: string;
}
export interface UefiBootOrderVariable {
  name: string;
  before: string;
  after: string;
}
export interface TpmInvalidEventlogPcr {
  computed?: string;
  quoted?: string;
  number: string;
}
export interface GrubBootChangedConfig {
  initrd: string;
  kernel: string;
  command_line: string[];
  initrd_path: string;
  kernel_path: string;
}
export interface EsetNotStartedComponent {
  path: string;
  started: boolean;
}
export interface EsetManipulatedFile {
  path: string;
  before: string;
  after: string;
}
export interface ImaInvalidLogPcr {
  computed: string;
  number: string;
  quoted: string;
}
export interface ImaRuntimeMeasurementsFile {
  path: string;
  before: string;
  after: string;
}
export interface TscPcrValuesPcr {
  tsc: string;
  quoted: string;
  number: string;
}
export interface FirmwareUpdateUpdates {
  name: string;
  current: string;
  next: string;
}
