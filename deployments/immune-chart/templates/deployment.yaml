apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "immune.fullname" . }}-appsrv
  labels:
    {{- include "immune.labels" . | nindent 4 }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.appsrv.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "immune.fullname" . }}-appsrv
      app.kubernetes.io/part-of: {{ .Release.Name }}
  template:
    metadata:
      {{- with .Values.appsrv.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "immune.fullname" . }}-appsrv
        app.kubernetes.io/part-of: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "immune.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.appsrv.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "immune.fullname" . }}-appsrv
          securityContext:
            {{- toYaml .Values.appsrv.securityContext | nindent 12 }}
          image: "{{ .Values.appsrv.image.repository }}:{{ .Values.appsrv.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.appsrv.image.pullPolicy }}
          startupProbe:
            tcpSocket:
              port: 3000
            periodSeconds: 2
            failureThreshold: 15
          livenessProbe:
            httpGet:
              port: 3000
              path: /
          resources:
            {{- toYaml .Values.appsrv.resources | nindent 12 }}
          volumeMounts:
            - name: environment
              mountPath: /build/.env.production
              subPath: .env.production

        - name: {{ include "immune.fullname" . }}-nginx
          image: nginx:stable
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /etc/nginx
              readOnly: true
              name: nginx-conf
          startupProbe:
            tcpSocket:
              port: 8000
            periodSeconds: 2
            failureThreshold: 15
          livenessProbe:
            httpGet:
              port: 8000
              path: /healthz
          readinessProbe:
            httpGet:
              port: 8000
              path: /
          ports:
            - containerPort: 8000
      volumes:
        - name: nginx-conf
          configMap:
            name: {{ include "immune.fullname" . }}-appsrv-nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: environment
          configMap:
            name: {{ include "immune.fullname" . }}-appsrv-config
            items:
              - key: env.production
                path: .env.production
      {{- with .Values.appsrv.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appsrv.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appsrv.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "immune.fullname" . }}-apisrv
  labels:
    {{- include "immune.labels" . | nindent 4 }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.apisrv.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "immune.fullname" . }}-apisrv
      app.kubernetes.io/part-of: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        immu.ne/public-key-0: {{ .Values.apisrv.keys.auth.pub | quote }}
        immu.ne/public-key-1: {{ .Values.apisrv.keys.enroll.pub | quote }}
      {{- with .Values.apisrv.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "immune.fullname" . }}-apisrv
        app.kubernetes.io/part-of: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "immune.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.apisrv.podSecurityContext | nindent 8 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "immune.fullname" . }}-apisrv-config
        - name: keys
          secret:
            secretName: {{ include "immune.fullname" . }}-apisrv-keys
        - name: db-certificate
          configMap:
            name: {{ include "immune.fullname" . }}-db-config
            items:
              - key: certificate
                path: chain.crt
      initContainers:
        - name: migration
          image: "{{ .Values.apisrv.image.repository }}:{{ .Values.apisrv.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.apisrv.image.pullPolicy }}
          args: ["--run-migrations"]
          env:
            - name: APISRV_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "immune.fullname" . }}-db-config
                  key: admin-url
            - name: APISRV_DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ include "immune.fullname" . }}-db-config
                  key: apisrv-database
            - name: APISRV_DATABASE_ADMIN_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ include "immune.fullname" . }}-db-secrets
                  key: admin-password
            - name: APISRV_DATABASE_USER_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ include "immune.fullname" . }}-db-secrets
                  key: apisrv-password
            - name: APISRV_DATABASE_SSLCERT
              value: /db-certificate/chain.crt
          volumeMounts:
            - name: db-certificate
              mountPath: /db-certificate
      containers:
        - name: apisrv
          image: "{{ .Values.apisrv.image.repository }}:{{ .Values.apisrv.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.apisrv.image.pullPolicy }}
          args: ["--start"]
          env:
            - name: APISRV_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "immune.fullname" . }}-db-config
                  key: apisrv-url
            - name: APISRV_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "immune.fullname" . }}-db-secrets
                  key: apisrv-password
            - name: APISRV_BUCKET_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "immune.fullname" . }}-apisrv-secrets
                  key: bucket-secret
            - name: APISRV_INTELTSC_LENOVO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "immune.fullname" . }}-apisrv-secrets
                  key: lenovo-password
            - name: APISRV_INTELTSC_LENOVO_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "immune.fullname" . }}-apisrv-secrets
                  key: lenovo-secret
            - name: APISRV_DATABASE_SSLCERT
              value: /db-certificate/chain.crt
          ports:
            - containerPort: 8000
          startupProbe:
            tcpSocket:
              port: 8000
            periodSeconds: 2
            failureThreshold: 15
          livenessProbe:
            timeoutSeconds: 5
            httpGet:
              port: 8000
              path: /v2/healthy
          readinessProbe:
            timeoutSeconds: 5
            httpGet:
              port: 8000
              path: /v2/ready
          volumeMounts:
            - name: db-certificate
              mountPath: /db-certificate
            - name: config
              mountPath: /etc/immune
            - name: keys
              mountPath: /keys
          resources:
            {{- toYaml .Values.appsrv.resources | nindent 12 }}
      {{- with .Values.appsrv.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appsrv.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appsrv.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "immune.fullname" . }}-authsrv
  labels:
    {{- include "immune.labels" . | nindent 4 }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.authsrv.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "immune.fullname" . }}-authsrv
      app.kubernetes.io/instance: {{ include "immune.fullname" . }}-authsrv
      app.kubernetes.io/part-of: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        immu.ne/public-key-0: "{{ .Values.authsrv.keys.auth.pub }}"
        prometheus.io/enable: "true"
        prometheus.io/metric_path: "/-/metrics"
        prometheus.io/scrape_port: "3000"
      {{- with .Values.authsrv.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "immune.fullname" . }}-authsrv
        app.kubernetes.io/instance: {{ include "immune.fullname" . }}-authsrv
        app.kubernetes.io/part-of: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "immune.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.authsrv.podSecurityContext | nindent 8 }}
      volumes:
        - name: db-certificate
          configMap:
            name: {{ include "immune.fullname" . }}-db-config
            items:
              - key: certificate
                path: chain.crt
        - name: keys
          secret:
            secretName: {{ include "immune.fullname" . }}-authsrv-keys
        - name: credentials
          configMap:
            name: {{ include "immune.fullname" . }}-authsrv-config
            items:
              - key: credentials.yml.enc
                path: production.yml.enc
        - name: settings
          configMap:
            name: {{ include "immune.fullname" . }}-authsrv-config
            items:
              - key: settings.yml
                path: production.yml
        - name: database
          configMap:
            name: {{ include "immune.fullname" . }}-authsrv-config
            items:
              - key: database.yml
                path: database.yml
      initContainers:
        - name: migration
          image: "{{ .Values.authsrv.image.repository }}:{{ .Values.authsrv.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.authsrv.image.pullPolicy }}
          args: ["--run-migrations"]
          env:
            - name: AUTHSRV_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  key: authsrv-url
                  name: {{ include "immune.fullname" . }}-db-config
            - name: AUTHSRV_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: authsrv-password
                  name: {{ include "immune.fullname" . }}-db-secrets
            - name: RAILS_ENV
              value: production
            - name: AUTHSRV_DATABASE_USER_ROLE
              value: authsrv
          envFrom:
            - secretRef:
                name: {{ include "immune.fullname" . }}-authsrv-secrets
          volumeMounts:
            - name: db-certificate
              mountPath: /db-certificate
            - name: credentials
              mountPath: /work/config/credentials
            - name: settings
              mountPath: /work/config/settings/production.yml
              subPath: production.yml
            - name: database
              mountPath: /work/config/database.yml
              subPath: database.yml
      containers:
        - name: authsrv
          image: "{{ .Values.authsrv.image.repository }}:{{ .Values.authsrv.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.authsrv.image.pullPolicy }}
          args: ["--start-rails"]
          resources:
            {{- toYaml .Values.appsrv.resources | nindent 12 }}
          env:
            - name: AUTHSRV_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  key: authsrv-url
                  name: {{ include "immune.fullname" . }}-db-config
            - name: AUTHSRV_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                   key: authsrv-password
                   name: {{ include "immune.fullname" . }}-db-secrets
            - name: RAILS_ENV
              value: production
          envFrom:
            - secretRef:
                name: {{ include "immune.fullname" . }}-authsrv-secrets
          ports:
            - containerPort: 3000
          startupProbe:
            tcpSocket:
              port: 3000
            periodSeconds: 2
            failureThreshold: 15
          livenessProbe:
            timeoutSeconds: 5
            httpGet:
              port: 3000
              path: /v2/healthy
          readinessProbe:
            timeoutSeconds: 5
            httpGet:
              port: 3000
              path: /v2/ready
          volumeMounts:
            - name: db-certificate
              mountPath: /db-certificate
            - name: credentials
              mountPath: /work/config/credentials
            - name: settings
              mountPath: /work/config/settings/production.yml
              subPath: production.yml
            - name: database
              mountPath: /work/config/database.yml
              subPath: database.yml
            - name: keys
              mountPath: /secrets

        - name: cron
          image: "{{ .Values.authsrv.image.repository }}:{{ .Values.authsrv.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.authsrv.image.pullPolicy }}
          args: ["--start-cron"]
          env:
            - name: AUTHSRV_DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  key: authsrv-url
                  name: {{ include "immune.fullname" . }}-db-config
            - name: AUTHSRV_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                   key: authsrv-password
                   name: {{ include "immune.fullname" . }}-db-secrets
            - name: RAILS_ENV
              value: production
          envFrom:
            - secretRef:
                name: {{ include "immune.fullname" . }}-authsrv-secrets
          volumeMounts:
            - name: db-certificate
              mountPath: /db-certificate
            - name: credentials
              mountPath: /work/config/credentials
            - name: settings
              mountPath: /work/config/settings/production.yml
              subPath: production.yml
            - name: database
              mountPath: /work/config/database.yml
              subPath: database.yml
      {{- with .Values.authsrv.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.authsrv.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.authsrv.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
